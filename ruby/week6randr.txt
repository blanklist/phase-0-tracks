1. In ruby, a class is a collection of states and behaviors from which individual instances of said class (objects) are created. The state of a class can be thought of as descriptions of what the object will be like: size, shape, etc. The individual objects will have different values for these states but the class will define what states are available. Instance variables are how a class will define the states and objects of that class will define those variables usually upon initialization. Behavior and instance methods are similarly matched. Behavior can be considered as what the class actions will be. By defining instance methods for a class, class abilities and behaviors are provided. The object, once created, can then call those instance methods in order to perform pre-determined tasks.
2. Attributes of a class are variables that describe the state of any object created by that class.
3. For instance, if I were to design a class called Car, the attributes could be such things as: model, color, horsepower, and size. An Car object created would have values assigned to each attribute as in: model: coupe, color: red, horsepower: hella, size: small.
4. The initialize method in a class runs immediately when a new class object is created. This is when the values of attributes are assigned to the object.
5. A module is different from a class in that it is a collection of behaviors without any need for descriptive states or variables.
6. Modules can be standalone so that when a user-defined method is called from a module the syntax myModule.myMethod would be used. This helps from methods interfering with one another when multiple people are involved in a single project. Modules can also be mixins so that the collection of methods can be used in multiple locations like multiple different classes.